COMPILER aflang

	const int // types
	  undef = 0, integer = 1, boolean = 2;

	const int // object kinds
	  var = 0, proc = 1;

	public SymbolTable   tab;
	public CodeGenerator gen;
  public NodeFactory factory;
  
/*--------------------------------------------------------------------------*/
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.

TOKENS
  ident  = letter {letter | digit}.
  number = digit {digit}.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab


PRODUCTIONS
/*------------------------------------------------------------------------*/
aflang                    (. string name; Root root; .)
= "program"
  Ident<out name>        (. tab.OpenScope(); root = new Root(); .)
  '{'
  { VarDecl | ProcDecl }
  '}'                    (. tab.CloseScope(); if (!gen.MainDefined) SemErr("main function never defined"); .).


/*------------------------------------------------------------------------*/
ProcDecl                 (. string name; Obj obj; INode fun, t1; .)
= "void"
  Ident<out name>        (. obj = tab.NewObj(name, proc, undef); tab.OpenScope(); .)
  '(' ')'
  '{'                   
  { VarDecl | Stat<out t1> }
  '}'                    (. tab.CloseScope(); .).


/*------------------------------------------------------------------------*/
VarDecl                  (. string name; int type; .)
= Type<out type>
  Ident<out name>        (. tab.NewObj(name, var, type); .)
  { ',' Ident<out name>  (. tab.NewObj(name, var, type); .)
  } ';'.


/*------------------------------------------------------------------------*/
Stat<out INode n>                     (. int type; string name; Obj obj; loopstart; INode t1, t2; n = new Error();.)
= Ident<out name>        (. obj = tab.Find(name);.)
  ( '='                  (. if (obj.kind != var) SemErr("cannot assign to procedure"); .)
		Expr<out type, out INode expr> ';'
						   (. if (type != obj.type) SemErr("incompatible types");
							  if (obj.level == 0) gen.Emit(Op.STOG, obj.adr);
							  else gen.Emit(Op.STO, obj.adr); .)
	| '(' ')' ';'          (. if (obj.kind != proc) SemErr("object is not a procedure"); n = new Call(name); .)
	)

| "if" 
	'(' Expr<out type, out INode expr> ')' (. if (type != boolean) SemErr("boolean type expected");.)
	Stat<out t1>
	[ "else"               
		Stat<out t2>
	]                      (.  .)

| "while"                (. loopstart = gen.pc; .)
	'(' Expr<out type, out INode expr> ')' (. if (type != boolean) SemErr("boolean type expected"); adr = gen.pc - 2; .)
	Stat<out t1>                 

| "read"
	Ident<out name> ';'    (. obj = tab.Find(name);
							  if (obj.type != integer) SemErr("integer type expected");
							  gen.Emit(Op.READ);
							  if (obj.level == 0) gen.Emit(Op.STOG, obj.adr);
							  else gen.Emit(Op.STO, obj.adr); .)

| "write" 
	Expr<out type, out INode expr> ';'     (. if (type != integer) SemErr("integer type expected");.).


/*------------------------------------------------------------------------*/
//simexpr = arithmetic 
Expr<out int type, out INode expr>       
= SimExpr<out type, out INode left>
  [ RelOp<out Op op>
    SimExpr<out int type1, out INode temp>   (. if (type != type1) SemErr("incompatible types"); type = boolean; .)
  ].


/*------------------------------------------------------------------------*/
SimExpr<out int type, out INode node>    (. temp; .)
= Term<out type, out INode left> (. node = left; .)
  { 
    AddOp<out Op op> (. temp = node; node = factory.Create(op.ToString()); .)
    Term<out int type1, out INode right>
	  (. if (type != integer || type1 != integer) SemErr("integer type expected"); .)
    (. node.Childrens.Add(temp); node.Childrens.Add(right); .)      
	}.


/*------------------------------------------------------------------------*/
Term<out int type, out INode n>
= Factor<out type, out INode left>   (. n = left; .)
  { 
    MulOp<out Op op>  (. n = factory.Create(op);  .)
    Factor<out int type1, out INode right>    
    (. if (type != integer || type1 != integer) SemErr("integer type expected"); .)
	}.


/*------------------------------------------------------------------------*/
Factor<out int type, out INode node>     (. int n; Obj obj; string name; node = new Error(); .)
=                        (. type = undef; .)
  ( Ident<out name>      (. obj = tab.Find(name); type = obj.type;
                            if (obj.kind == var) {
                              if (obj.level == 0) {
                                node = factory.Create("gvar");
                                node.Value = obj.adr.ToString(); 
                              } else {
                                node = factory.Create("gvar");
                                node.Value = obj.adr.ToString(); 
                              } 
                            } else SemErr("variable expected"); .)
  | number               (. n = int.Parse(t.val); node = factory.Create("const"); 
                            node.Value = t.val; type = integer; .)
  | '-'
    Factor<out type, out node>     (. if (type != integer) {
                              SemErr("integer type expected"); type = integer;
                            }
                            node.Value = '-' + node.Value; .)
  | "true"               (. node = new Bool(); node.Value = "true"; type = boolean; .)
  | "false"              (.  node = new Bool(); node.Value = "false"; type = boolean; .)
  ).


/*------------------------------------------------------------------------*/
AddOp<out Op op>
= (. op = Op.ADD; .) ( '+' | '-' (. op = Op.SUB; .)).


/*------------------------------------------------------------------------*/
Ident<out string name>
= ident                  (. name = t.val; .).


/*------------------------------------------------------------------------*/
MulOp<out Op op>
= (. op = Op.MUL; .) ( '*' | '/' (. op = Op.DIV; .)).


/*------------------------------------------------------------------------*/
RelOp<out Op op>
= (. op = Op.EQU; .) ( "==" | '<' (. op = Op.LSS; .) | '>' (. op = Op.GTR; .)).


/*------------------------------------------------------------------------*/
Type<out int type>
=                        (. type = undef; .)
 ( "int"                 (. type = integer; .)
 | "bool"                (. type = boolean; .)
 ).
END aflang.